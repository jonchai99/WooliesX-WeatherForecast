#################################################
# Variables
#################################################
variables:
  - name: backendGcsBucket
    value: tf-state26226

  - name: backendGcsPrefix
    value: terraform/state

  - name: workingDirectory
    value: ./application

#################################################
# Triggers
#################################################
pr: none
trigger:
  branches:
    include:
      - main
  paths:
    include:
      - application

#################################################
# Parameters
#################################################
parameters:
  - name: imageTag
    type: string
    default: '247904'

pool:
  name: Default

stages:
  - stage: DOWNLOAD_AND_PUSH
    displayName: Obtain image from source and publish
    jobs:
      - job: PUBLISH_IMAGE
        displayName: Publish image to GAR
        steps:
          - script: docker pull dfranciswoolies/ciarecruitment-bestapiever:${{ parameters.imageTag }}
            displayName: Download image from Docker Hub
          - script: |
              docker tag dfranciswoolies/ciarecruitment-bestapiever:${{ parameters.imageTag }} australia-southeast1-docker.pkg.dev/wooliesx-interview/wooliesx-interview-repo/weather-forecast-api:${{ parameters.imageTag }}
            displayName: Tag downloaded image to prepare for GAR
          - task: DownloadSecureFile@1
            name: pipelineAccessKey
            displayName: 'Download Pipeline GAR service account access key'
            inputs:
              secureFile: 'wooliesx-interview-pipeline-gar.json'
          - script: |
              docker login -u _json_key --password-stdin https://australia-southeast1-docker.pkg.dev < $(pipelineAccessKey.secureFilePath)
            displayName: Login to GAR
          - script: |
              docker push australia-southeast1-docker.pkg.dev/wooliesx-interview/wooliesx-interview-repo/weather-forecast-api:${{ parameters.imageTag }}
            displayName: Push image to GAR

  - stage: DEPLOY_ENV_DEV
    displayName: Run Terraform Apply and provision resources
    dependsOn: DOWNLOAD_AND_PUSH
    jobs:
      - job: TERRAFORM_APPLY
        variables:
          - name: environment
            value: dev
        displayName: Apply Terraform resources
        steps:
          - task: TerraformInstaller@0
            displayName: Install latest Terraform version
            inputs:
              terraformVersion: latest
          - task: TerraformCLI@0
            displayName: Run Terraform Init
            inputs:
              command: init
              workingDirectory: $(workingDirectory)
              backendType: gcs
              # Google Credentials (i.e. for service account) in JSON file format in Azure DevOps Secure Files
              backendGcsCredentials: wooliesx-interview-tf-state.json
              # GCS bucket name
              backendGcsBucket: $(backendGcsBucket)
              # GCS Bucket path to state file
              backendGcsPrefix: $(backendGcsPrefix)
          - task: TerraformCLI@0
            displayName: Select workspace - $(environment)
            inputs:
              workingDirectory: $(workingDirectory)
              command: workspace
              workspaceSubCommand: select
              workspaceName: $(environment)
          - powershell: Add-Content "$(Build.SourcesDirectory)/application/services/terraform-$(environment).tfvars" "`ncloud_run_image_tag = `"${{ parameters.imageTag }}`""
            displayName: Update image tag
          - task: TerraformCLI@0
            displayName: Run Terraform Apply
            inputs:
              command: apply
              workingDirectory: $(workingDirectory)
              # Google Credentials (i.e. for service account) in JSON file format in Azure DevOps Secure Files
              providerGoogleCredentials: wooliesx-interview-tf.json
              # The default project name where resources are managed. Defining project on a resource takes precedence over this.
              providerGoogleProject: wooliesx-interview
              # The default region where resources are managed. Defining region on a resource takes precedence over this.
              providerGoogleRegion: australia-southeast1
              commandOptions: "-auto-approve -var-file=./services/terraform-$(environment).tfvars"
          - task: TerraformCLI@0
            displayName: 'Run Terraform Output'
            inputs:
              command: output
              workingDirectory: $(workingDirectory)
          - script: echo "##vso[task.setvariable variable=cloudRunUrl]$(TF_OUT_service_url)"
            displayName: Set Cloud Run public URL
            name: setvar
          - powershell: |
              try
              {
                Write-Host "Sending request to $env:CLOUD_RUN_URL/health"
                $Response = Invoke-WebRequest -Method Get -Uri "$env:CLOUD_RUN_URL/health"
              }
              catch
              {
                Write-Host "Health check failed"
                exit 1
              }
            env:
              CLOUD_RUN_URL: $(cloudRunUrl).replace('"', '')
            displayName: Perform health check
